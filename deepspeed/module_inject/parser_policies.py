import re


# yapf: disable
class ParserPolicies():
    parser_policy_map = dict(
        albert=dict(AlbertLayer=(".ffn_output", "attention.dense", ), ),
        bart=dict(BartEncoderLayer=("self_attn.out_proj", ".fc2", ), BartDecoderLayer=("encoder_attn.out_proj", "self_attn.out_proj", ".fc2", ), ),
        beit=dict(BeitLayer=("intermediate.dense", "output.dense", ), ),
        bert=dict(BertLayer=("output.dense", ), ),
        bertgeneration=dict(BertGenerationLayer=("output.dense", ), ),
        bigbird=dict(BigBirdLayer=("output.dense", ), ),
        bigbirdpegasus=dict(BigBirdPegasusEncoderLayer=(".fc2", "self_attn.output", ), BigBirdPegasusDecoderLayer=(".fc2", "self_attn.out_proj", "encoder_attn.out_proj", ), ),
        blenderbot=dict(BlenderbotEncoderLayer=("self_attn.out_proj", ".fc2", ), BlenderbotDecoderLayer=("encoder_attn.out_proj", "self_attn.out_proj", ".fc2", ), ),
        blenderbotsmall=dict(BlenderbotSmallDecoderLayer=("encoder_attn.out_proj", "self_attn.out_proj", ".fc2", ), BlenderbotSmallEncoderLayer=("self_attn.out_proj", ".fc2", ), ),
        bloom=dict(BloomBlock=("self_attention.dense", "mlp.dense_4h_to_h", ), ),
        camembert=dict(CamembertLayer=("output.dense", ), ),
        canine=dict(CanineLayer=("output.dense", ), ),
        clip=dict(CLIPEncoderLayer=("mlp.fc2", "self_attn.out_proj", ), ),
        codegen=dict(CodeGenBlock=("mlp.fc_out", "attn.out_proj", ), ),
        conditionaldetr=dict(ConditionalDetrEncoderLayer=(".fc2", "self_attn.out_proj", ), ConditionalDetrDecoderLayer=("encoder_attn.out_proj", ".fc2", "self_attn.out_proj", ), ),
        convbert=dict(ConvBertLayer=("output.dense", ), ),
        ctrl=dict(EncoderLayer=("multi_head_attention.dense", ), ),
        data2vecaudio=dict(Data2VecAudioEncoderLayer=("feed_forward.output_dense", "attention.out_proj", ), ),
        data2vectext=dict(Data2VecTextLayer=("output.dense", ), ),
        data2vecvision=dict(Data2VecVisionLayer=("output.dense", "intermediate.dense", ), ),
        deberta=dict(DebertaLayer=("output.dense", ), ),
        debertav2=dict(DebertaV2Layer=("output.dense", ), ),
        deformabledetr=dict(DeformableDetrDecoderLayer=("encoder_attn.output_proj", ".fc2", "self_attn.out_proj", ), DeformableDetrEncoderLayer=(".fc2", "self_attn.output_proj", ), ),
        deit=dict(DeiTLayer=("intermediate.dense", "output.dense", ), ),
        detr=dict(DetrDecoderLayer=("encoder_attn.out_proj", "self_attn.out_proj", ".fc2", ), DetrEncoderLayer=("self_attn.out_proj", ".fc2", ), ),
        distilbert=dict(TransformerBlock=("attention.out_lin", "ffn.lin2", ), ),
        donutswin=dict(DonutSwinLayer=("intermediate.dense", "output.dense", ), ),
        dpt=dict(DPTViTLayer=("intermediate.dense", "output.dense", ), ),
        electra=dict(ElectraLayer=("output.dense", ), ),
        ernie=dict(ErnieLayer=("output.dense", ), ),
        esm=dict(EsmLayer=("intermediate.dense", "output.dense", ), ),
        flava=dict(FlavaLayer=("output.dense", "intermediate.dense", ), ),
        fnet=dict(FNetLayer=("output.dense", ), ),
        fsmt=dict(EncoderLayer=(".fc2", "self_attn.out_proj", ), DecoderLayer=("encoder_attn.out_proj", ".fc2", "self_attn.out_proj", ), ),
        funnel=dict(FunnelLayer=("ffn.linear_2", "attention.post_proj", ), ),
        gpt_neo=dict(GPTNeoBlock=("mlp.c_proj", "attention.out_proj" ), ),
        gptneox=dict(GPTNeoXLayer=("attention.dense", "mlp.dense_4h_to_h", ), ),
        gptneoxjapanese=dict(GPTNeoXJapaneseLayer=("attention.dense", "mlp.dense_4h_to_h", ), ),
        gptj=dict(GPTJBlock=("attn.out_proj", "mlp.fc_out", ), ),
        groupvit=dict(GroupViTStage=("assign.proj", "mlp_channels.fc2", ), GroupViTEncoderLayer=("self_attn.out_proj", "mlp.fc2", ), ),
        hubert=dict(HubertEncoderLayer=("attention.out_proj", "feed_forward.output_dense", ), HubertEncoderLayerStableLayerNorm=("attention.out_proj", "feed_forward.output_dense", ), ),
        layoutlm=dict(LayoutLMLayer=("output.dense", ), ),
        layoutlmv2=dict(LayoutLMv2Layer=("output.dense", ), ),
        layoutlmv3=dict(LayoutLMv3Layer=("output.dense", ), ),
        led=dict(LEDEncoderLayer=("self_attn.output", ".fc2", ), LEDDecoderLayer=("self_attn.out_proj", "encoder_attn.out_proj", ".fc2", ), ),
        lilt=dict(LiltLayer=("output.dense", "layout_output.dense", ), ),
        longformer=dict(LongformerLayer=("output.dense", ), ),
        longt5=dict(LongT5Block=("DenseReluDense.wo", "EncDecAttention.o", ), ),
        luke=dict(LukeLayer=("output.dense", ), ),
        lxmert=dict(LxmertLayer=("output.dense", ), ),
        m2m100=dict(M2M100DecoderLayer=(".fc2", "self_attn.out_proj", "encoder_attn.out_proj", ), M2M100EncoderLayer=(".fc2", "self_attn.out_proj", ), ),
        marian=dict(MarianEncoderLayer=("self_attn.out_proj", ".fc2", ), MarianDecoderLayer=("self_attn.out_proj", "encoder_attn.out_proj", ".fc2", ), ),
        markuplm=dict(MarkupLMLayer=("output.dense", ), ),
        maskformer=dict(DetrDecoderLayer=(".fc2", "encoder_attn.out_proj", "self_attn.out_proj", ), MaskFormerSwinBlock=("intermediate.dense", "output.dense", ), ),
        mbart=dict(MBartDecoderLayer=("encoder_attn.out_proj", "self_attn.out_proj", ".fc2", ), MBartEncoderLayer=("self_attn.out_proj", ".fc2", ), ),
        mctct=dict(MCTCTLayer=("output.dense", ), ),
        megatronbert=dict(MegatronBertLayer=("output.dense", "intermediate.dense", ), ),
        mobilebert=dict(MobileBertLayer=("input.dense", "attention.dense", "output.dense", "bottleneck.dense", ), FFNLayer=("output.dense", ), ),
        mpnet=dict(MPNetLayer=("output.dense", ), ),
        mvp=dict(MvpDecoderLayer=(".fc2", "self_attn.out_proj", "encoder_attn.out_proj", ), MvpEncoderLayer=(".fc2", "self_attn.out_proj", ), ),
        nezha=dict(NezhaLayer=("output.dense", ), ),
        nystromformer=dict(NystromformerLayer=("output.dense", ), ),
        opt=dict(OPTDecoderLayer=("self_attn.out_proj", ".fc2", ), ),
        owlvit=dict(OwlViTEncoderLayer=("mlp.fc2", "self_attn.out_proj", ), ),
        pegasus=dict(PegasusEncoderLayer=("self_attn.out_proj", ".fc2", ), PegasusDecoderLayer=("self_attn.out_proj", "encoder_attn.out_proj", ".fc2", ), ),
        pegasusx=dict(PegasusXDecoderLayer=(".fc2", "encoder_attn.out_proj", "self_attn.out_proj", ), ),
        plbart=dict(PLBartDecoderLayer=(".fc2", "self_attn.out_proj", "encoder_attn.out_proj", ), PLBartEncoderLayer=(".fc2", "self_attn.out_proj", ), ),
        prophetnet=dict(ProphetNetEncoderLayer=("feed_forward.output", "self_attn.out_proj", ), ProphetNetDecoderLayer=("self_attn.relative_pos_embeddings", "cross_attn.out_proj", "feed_forward.output", ), ),
        realm=dict(RealmLayer=("output.dense", ), ),
        reformer=dict(ReformerLayer=("dense.dense", "output.dense", "self_attention.value", ), ),
        rembert=dict(RemBertLayer=("output.dense", ), ),
        roberta=dict(RobertaLayer=("output.dense", ), ),
        roformer=dict(RoFormerLayer=("output.dense", ), ),
        sew=dict(SEWEncoderLayer=("attention.out_proj", "feed_forward.output_dense", ), ),
        sewd=dict(SEWDLayer=("output.dense", ), ),
        speechtotext=dict(Speech2TextDecoderLayer=("self_attn.out_proj", ".fc2", "encoder_attn.out_proj", ), Speech2TextEncoderLayer=("self_attn.out_proj", ".fc2", ), ),
        speechtotext2=dict(Speech2Text2DecoderLayer=("encoder_attn.out_proj", ".fc2", "self_attn.out_proj", ), ),
        splinter=dict(SplinterLayer=("output.dense", ), ),
        swin=dict(SwinLayer=("intermediate.dense", "output.dense", ), ),
        swinv2=dict(Swinv2Layer=("intermediate.dense", "output.dense", ), ),
        t5=dict(T5Block=("DenseReluDense.wo", "SelfAttention.o", "EncDecAttention.o", ), ),
        tabletransformer=dict(TableTransformerDecoderLayer=("self_attn.out_proj", ".fc2", "encoder_attn.out_proj", ), TableTransformerEncoderLayer=("self_attn.out_proj", ".fc2", ), ),
        tapas=dict(TapasLayer=("output.dense", ), ),
        timeseriestransformer=dict(TimeSeriesTransformerDecoderLayer=(".fc2", "self_attn.out_proj", "encoder_attn.out_proj", ), TimeSeriesTransformerEncoderLayer=(".fc2", "self_attn.out_proj", ), ),
        trajectorytransformer=dict(Block=(".l2", "attn.proj", ), ),
        trocr=dict(TrOCRDecoderLayer=(".fc2", "encoder_attn.out_proj", "self_attn.out_proj", ), ),
        unispeech=dict(UniSpeechEncoderLayer=("feed_forward.output_dense", "attention.out_proj", ), UniSpeechEncoderLayerStableLayerNorm=("feed_forward.output_dense", "attention.out_proj", ), ),
        unispeechsat=dict(UniSpeechSatEncoderLayerStableLayerNorm=("attention.out_proj", "feed_forward.output_dense", ), UniSpeechSatEncoderLayer=("attention.out_proj", "feed_forward.output_dense", ), ),
        videomae=dict(VideoMAELayer=("intermediate.dense", "output.dense", ), ),
        vilt=dict(ViltLayer=("output.dense", "intermediate.dense", ), ),
        visualbert=dict(VisualBertLayer=("output.dense", ), ),
        vit=dict(ViTLayer=("intermediate.dense", "output.dense", ), ),
        vitmae=dict(ViTMAELayer=("intermediate.dense", "output.dense", ), ),
        vitmsn=dict(ViTMSNLayer=("output.dense", "intermediate.dense", ), ),
        wav2vec2=dict(Wav2Vec2EncoderLayerStableLayerNorm=("attention.out_proj", "feed_forward.output_dense", ), Wav2Vec2EncoderLayer=("attention.out_proj", "feed_forward.output_dense", ), ),
        wav2vec2conformer=dict(Wav2Vec2ConformerEncoderLayer=("self_attn.linear_pos", "ffn1.output_dense", "ffn2.output_dense", ), ),
        wavlm=dict(WavLMEncoderLayer=("attention.gru_rel_pos_linear", "feed_forward.output_dense", ), WavLMEncoderLayerStableLayerNorm=("attention.gru_rel_pos_linear", "feed_forward.output_dense", ), ),
        whisper=dict(WhisperEncoderLayer=("self_attn.out_proj", ".fc2", ), WhisperDecoderLayer=("self_attn.out_proj", "encoder_attn.out_proj", ".fc2", ), ),
        xclip=dict(PromptGeneratorLayer=("cross_attn.proj", ), XCLIPVisionEncoderLayer=(".message_fc", "message_attn.out_proj", "mlp.fc2", "self_attn.out_proj", ), XCLIPEncoderLayer=("mlp.fc2", "self_attn.out_proj", ), ),
        xglm=dict(XGLMDecoderLayer=(".fc2", "encoder_attn.out_proj", "self_attn.out_proj", ), ),
        xlmprophetnet=dict(XLMProphetNetEncoderLayer=("self_attn.out_proj", "feed_forward.output", ), XLMProphetNetDecoderLayer=("cross_attn.out_proj", "self_attn.relative_pos_embeddings", "feed_forward.output", ), ),
        xlmroberta=dict(XLMRobertaLayer=("output.dense", ), ),
        xlmrobertaxl=dict(XLMRobertaXLLayer=("intermediate.dense", "output.dense", ), ),
        xlnet=dict(XLNetLayer=("ff.layer_2", ), ),
        yolos=dict(YolosLayer=("output.dense", "intermediate.dense", ), ),
        yoso=dict(YosoLayer=("output.dense", ), ),
    )

    def get_map_key(model):
        key = re.search(r": (.*?)Model", model)
        if key is None:
            key = re.search(r": (.*?)Stack", model)
        return key.group(1).lower()
